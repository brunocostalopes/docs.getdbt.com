name: Vale Lint and Suggest

on:
  pull_request:
    paths:
      - '**/*.md'

jobs:
  lint-and-suggest:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Install Vale
      uses: errata-ai/vale-action@v2

    - name: Get all changed markdown files
      id: changed-markdown-files
      uses: tj-actions/changed-files@v44
      with:
        files: |
           **/*.md

    - name: List all changed markdown files
      if: steps.changed-markdown-files.outputs.any_changed == 'true'
      env:
        ALL_CHANGED_FILES: ${{ steps.changed-markdown-files.outputs.all_changed_files }}
      run: |
        for file in ${ALL_CHANGED_FILES}; do
          echo "$file was changed"
        done

    - name: Run Vale on changed files
      run: |
        for file in ${{ env.ALL_CHANGED_FILES }}; do
          echo "Running Vale on $file"
          vale --output=JSON $file > "vale_output_${file//\//_}.json"
          vale --output=edit $file > "vale_output_${file//\//_}_edit.md"
        done
        echo "Vale outputs:"
        ls -l

    - name: Merge JSON outputs
      if: steps.changed-markdown-files.outputs.any_changed == 'true'
      run: |
        if ls vale_output_*.json 1> /dev/null 2>&1; then
          jq -s '.' vale_output_*.json > vale_report.json
        else
          echo '[]' > vale_report.json
        fi

    - name: Install Python and dependencies
      uses: actions/setup-python@v2
      with:
        python-version: '3.x'
    - run: pip install requests

    - name: Run Auto-suggestion Script
      env:
        GITHUB_TOKEN: ${{ secrets.VALE_GITHUB_TOKEN }}
      run: |
        python3 << 'EOF'
        import os
        import requests
        import json

        def parse_vale_output(vale_report_path):
            with open(vale_report_path, 'r') as file:
                data = json.load(file)
            suggestions = []
            for item in data:
                file_path = item['Path']
                for match in item['Matches']:
                    line_number = match['Line']
                    message = match['Message']
                    suggestion = message.split('=>')[1].strip('`') if '=>' in message else None
                    if suggestion:
                        suggestions.append({
                            "file_path": file_path,
                            "line_number": line_number,
                            "suggestion": suggestion
                        })
            return suggestions

        vale_report_path = 'vale_report.json'
        suggestions = parse_vale_output(vale_report_path)

        repo = os.getenv('GITHUB_REPOSITORY')
        pull_request_number = os.getenv('GITHUB_REF').split('/')[-2]  # Correct extraction of PR number
        token = os.getenv('VALE_GITHUB_TOKEN')  # Correct token environment variable
        commit_id = os.getenv('GITHUB_SHA')

        headers = {
            'Authorization': f'token {token}',
            'Accept': 'application/vnd.github.v3+json'
        }

        for suggestion in suggestions:
            comment = {
                "body": f"Suggestion: Change `{suggestion['suggestion']}` on line {suggestion['line_number']} in `{suggestion['file_path']}`",
                "commit_id": commit_id,
                "path": suggestion['file_path'],
                "position": suggestion['line_number'],
                "side": "RIGHT"
            }

            response = requests.post(
                f"https://api.github.com/repos/{repo}/pulls/{pull_request_number}/comments",
                headers=headers,
                data=json.dumps(comment)
            )

            if response.status_code != 201:
                print(f"Failed to create comment: {response.json()}")

        EOF
