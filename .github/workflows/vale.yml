name: Lint and suggest

on:
  pull_request:
    paths:
      - '**/*.md'

permissions:
  contents: read
  pull-requests: write

jobs:
  vale: # Vale linting job
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      with:
        fetch-depth: 0  # Fetch all history so we can access all commits

    - name: Install Vale
      uses: errata-ai/vale-action@v2
      with:
        version: latest

    - name: Install jq
      run: sudo apt-get install -y jq

    - name: Get all changed markdown files
      id: changed-markdown-files
      uses: tj-actions/changed-files@v44
      with:
        files: |
           **/*.md

    - name: List all changed markdown files
      if: steps.changed-markdown-files.outputs.any_changed == 'true'
      env:
        ALL_CHANGED_FILES: ${{ steps.changed-markdown-files.outputs.all_changed_files }}
      run: |
        for file in ${ALL_CHANGED_FILES}; do
          echo "$file was changed"
        done

    - name: Run Vale on changed files
      run: |
        for file in ${{ env.ALL_CHANGED_FILES }}; do
          echo "Running Vale on $file"
          vale --output=JSON $file > "vale_output_${file//\//_}.json"
          vale --output=edit $file > "vale_output_${file//\//_}_edit.md"
        done
        echo "Vale outputs:"
        ls -l
  
    - name: Merge JSON outputs
      if: steps.changed-markdown-files.outputs.any_changed == 'true'
      run: jq -s '.' vale_output/vale_output_*.json > vale_report.json

    - name: Create suggestions using OpenAI
      if: steps.changed-markdown-files.outputs.any_changed == 'true'
      env:
        GITHUB_TOKEN: ${{ secrets.REVIEWDOG_GITHUB_API_TOKEN }}
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      run: |
        pip install openai PyGithub
        echo '
        import json
        import os
        import openai
        from github import Github

        def suggest_changes(report_path, token, openai_api_key, repo_name, pr_number):
            openai.api_key = openai_api_key
            with open(report_path) as f:
                report = json.load(f)

            g = Github(token)
            repo = g.get_repo(repo_name)
            pr = repo.get_pull(pr_number)

            for file in report:
                file_path = file["path"]
                suggestions = file["matches"]
                for suggestion in suggestions:
                    start_line = suggestion["line"]
                    end_line = suggestion["line"]
                    original_text = suggestion["match"]
                    response = openai.Completion.create(
                        engine="text-davinci-003",
                        prompt=f"Suggest a correction for this text: {original_text}",
                        max_tokens=50
                    )
                    correction = response.choices[0].text.strip()

                    patch = f"```suggestion\n{correction}\n```"
                    pr.create_review_comment(patch, pr.head.sha, file_path, start_line, end_line)

        if __name__ == "__main__":
            report_path = "vale_report.json"
            token = os.environ["REVIEWDOG_GITHUB_API_TOKEN"]
            openai_api_key = os.environ["OPENAI_API_KEY"]
            repo_name = os.environ["GITHUB_REPOSITORY"]
            pr_number = os.environ["GITHUB_EVENT_PULL_REQUEST_NUMBER"]
            suggest_changes(report_path, token, openai_api_key, repo_name, pr_number)
        ' > suggest_changes.py
        python suggest_changes.py
