name: Vale Lint and Suggest

on:
  pull_request:
    paths:
      - '**/*.md'

jobs:
  lint-and-suggest:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Install Vale
      uses: errata-ai/vale-action@v2
      with:
        version: latest

    - name: Get all changed markdown files
      id: changed-markdown-files
      uses: tj-actions/changed-files@v44
      with:
        files: |
           **/*.md
  
    - name: List all changed markdown files
      if: steps.changed-markdown-files.outputs.any_changed == 'true'
      env:
        ALL_CHANGED_FILES: ${{ steps.changed-markdown-files.outputs.all_changed_files }}
      run: |
        for file in ${ALL_CHANGED_FILES}; do
          echo "$file was changed"
        done
  
    - name: Run Vale on changed files
      run: |
        mkdir -p vale_output
        for file in ${{ env.ALL_CHANGED_FILES }}; do
          echo "Running Vale on $file"
          vale --output=JSON $file > "vale_output/vale_output_${file//\//_}.json"
          vale --output=edit $file > "vale_output/vale_output_${file//\//_}_edit.md"
        done
        echo "Vale outputs:"
        ls -l vale_output

    - name: Install Python and dependencies
      uses: actions/setup-python@v2
      with:
        python-version: '3.x'
    - run: pip install requests

    - name: Run Auto-suggestion Script
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        python3 << 'EOF'
        import os
        import requests
        import json

        # Example output from Vale (this should be captured dynamically)
        vale_output = '''
        ./docs/example.md
         12: `teh` => `the`
        '''

        suggestions = []
        for line in vale_output.splitlines():
            if "=>" in line:
                file_path, line_number, suggestion = line.split(':', 2)
                suggestions.append({
                    "file_path": file_path.strip(),
                    "line_number": int(line_number.strip()),
                    "suggestion": suggestion.strip().split('=>')[1].strip().strip('`')
                })

        repo = os.getenv('GITHUB_REPOSITORY')
        pull_request_number = os.getenv('GITHUB_REF').split('/')[-2]
        token = os.getenv('GITHUB_TOKEN')

        headers = {
            'Authorization': f'token {token}',
            'Accept': 'application/vnd.github.v3+json'
        }

        for suggestion in suggestions:
            comment = {
                "body": f"Suggestion: Change `{suggestion['suggestion']}` on line {suggestion['line_number']} in `{suggestion['file_path']}`",
                "path": suggestion['file_path'],
                "position": suggestion['line_number'],
                "side": "RIGHT",
                "line": suggestion['line_number']
            }

            response = requests.post(
                f"https://api.github.com/repos/{repo}/pulls/{pull_request_number}/comments",
                headers=headers,
                data=json.dumps(comment)
            )

            if response.status_code != 201:
                print(f"Failed to create comment: {response.json()}")

        EOF
